{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="main">
        <div class="container">
            <h1>This is the report page</h1>
            <a href="#kmom01"><h2>kmom01</h2></a>
            <p>Min mest omfattande kunskap och erfarenhet av objektorientering kommer från Oopython, där vi har arbetat med objektorientering under hela kursen. Under javascriptkursen förra hösten hade vi en snabb genomgång av objektorientering.</p>
            <p>För att komma igång med klasser i PHP är det viktigt att förstå att en klass fungerar som en mall för att skapa objekt. En klass definierar både egenskaper (variabler) och metoder (funktioner) för de objekt som skapas från den. Det är viktigt att notera att metoder delas mellan alla objekt som skapas från klassen, medan egenskaperna är individuella för varje objekt. Genom att förstå dessa grundläggande koncept kan man börja skapa sina första klasser och objekt i PHP.</p>
            <p>Kodbasen för uppgiften me/report är strukturerad med implementering av PHP, Symfony, Twig och Encore. Den är uppdelad i tre controllers för olika typer av begäranden: en för Twig-templates, en för JSON-respons och en för API-anrop. Symfony's routing och annotations används för att definiera vägar till respektive controllers, vilket ger en tydlig struktur. Separationen av controllers efter deras ansvarsområden underlättar underhåll och utökning av kodbasen. Twig-templates är utformade med separata block för olika delar av sidan, vilket möjliggör enkel återanvändning och modifiering av layouten.</p>
            <p>Baserat på artikeln "PHP The Right Way" finner jag flera delar extra intressanta och värdefulla. Speciellt avsnittet 'Coding Practices', särskilt 'The Basics', ger en solid grund för att både fräscha upp minnet och komma igång med lite mer avancerat PHP med fokus på objektorientering. 'Templating' är också en viktig del, särskilt med tanke på 'mvc'-kursen, och hjälper till att hantera mallar på ett effektivt sätt.</p>
            <p>Jag är också nyfiken på delar som 'Testing' och 'Server and Deployment', då de kan hjälpa mig att säkerställa kvaliteten hos en applikation och lära mig hur man distribuerar den.</p>
            <p>TIL (Today I Learned) för detta kursmoment är både objektorienteringens grundläggande koncept i PHP och det första steget i att implementera arkitekturen för Model-View-Controller (MVC) i PHP för att bygga en applikation.</p>
            <a href="#kmom02"><h2>kmom02</h2></a>
            <p>Arv är ett koncept där en klass, kallad subklass, kan ärva egenskaper och metoder från en annan klass, kallad superklass. I PHP uppnås arv med hjälp av nyckelordet 'extends'. Komposition är en princip där en klass innehåller en instans av en annan klass. Komposition innebär en stark koppling mellan klasser. I PHP implementeras komposition genom att skapa en instans av en annan klass inom en klass. Interface definierar ett kontrakt för klasser som implementerar det. Det specificerar en uppsättning metoder som den implementerande klassen måste definiera. Olika klasser kan behandlas på samma sätt så länge de implementerar samma gränssnitt. Trait hjälper till med återanvändning av kod. Traits liknar klasser men kan inte instansieras på egen hand; de används för att utöka funktionaliteten hos klasser genom att lägga till metoder och egenskaper. Traits kan inkluderas i klasser med hjälp av nyckelordet 'use', vilket möjliggör att flera traits används i en enda klass.</p>
            <p>För att lösa uppgiften har jag beslutat mig för att skapa sex olika klasser: de tre rekommenderade klasserna, en ytterligare för grafikkort och två till för att hantera delen med 'deal': Player och Game. Jag är ganska nöjd med min implementation, men den kan förbättras. Till exempel skulle det vara bättre att skapa ett Card Interface istället för att ärva CardGraphic från Card. Dessutom tror jag att klasserna Game, Player och CardHand kan förbättras för att bli mer effektiva. Strukturen verkar ganska bra för att skapa ett kortspel med olika funktioner.</p>
            <p>Hittills har jag funnit att Symfony erbjuder en strukturerad ram att arbeta inom, vilket har underlättat organiseringen och hanteringen av koden. Resultatet är en mer modulär kod som är lättare att underhålla. Jag inser dock att jag bara har skrapat på ytan av vad Symfony har att erbjuda. Det ser jag fram emot att utforska vidare i mitt arbete med plattformen.</p>
            <p>Under detta kursmoment har jag lärt mig mer om arv, komposition och hantering av sessioner. Det har varit en bra repetition av kodstruktur med objektorientering genom att skapa ett spel som utnyttjar olika klasser och funktionaliteter.</p>

        </div>
    </div>
{% endblock %}